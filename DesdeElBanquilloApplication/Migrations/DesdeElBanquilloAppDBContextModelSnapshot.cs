// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesdeElBanquilloApplication.Migrations
{
    [DbContext(typeof(DesdeElBanquilloAppDBContext))]
    partial class DesdeElBanquilloAppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Administrator", b =>
                {
                    b.Property<int>("IdAdministrator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAdministrator"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdAdministrator");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Competition", b =>
                {
                    b.Property<int>("IdCompetition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompetition"));

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<int>("IdFederation")
                        .HasColumnType("int");

                    b.Property<int>("IdSeason")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCompetition");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdFederation");

                    b.HasIndex("IdSeason");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCountry"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCountry");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Federation", b =>
                {
                    b.Property<int>("IdFederation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFederation"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdFederation");

                    b.HasIndex("IdCountry");

                    b.ToTable("Federations");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.League", b =>
                {
                    b.Property<int>("IdLeague")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLeague"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdLeague");

                    b.HasIndex("IdCountry");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.LeagueTable", b =>
                {
                    b.Property<int>("IdLeagueTable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLeagueTable"));

                    b.Property<int>("GoalDifference")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<int>("IdSeason")
                        .HasColumnType("int");

                    b.Property<int>("IdTeam")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchesDrawn")
                        .HasColumnType("int");

                    b.Property<int>("MatchesLost")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("IdLeagueTable");

                    b.HasIndex("IdSeason");

                    b.HasIndex("IdTeam");

                    b.ToTable("LeagueTables");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Match", b =>
                {
                    b.Property<int>("IdMatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMatch"));

                    b.Property<int?>("AwayGoals")
                        .HasColumnType("int");

                    b.Property<int?>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<int>("IdAwayTeam")
                        .HasColumnType("int");

                    b.Property<int>("IdCompetition")
                        .HasColumnType("int");

                    b.Property<int>("IdHomeTeam")
                        .HasColumnType("int");

                    b.Property<int>("IdStadium")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Referee")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SeasonIdSeason")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdMatch");

                    b.HasIndex("IdAwayTeam");

                    b.HasIndex("IdCompetition");

                    b.HasIndex("IdHomeTeam");

                    b.HasIndex("IdStadium");

                    b.HasIndex("SeasonIdSeason");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.MatchPlayer", b =>
                {
                    b.Property<int>("IdMatchPlayers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMatchPlayers"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("IdMatch")
                        .HasColumnType("int");

                    b.Property<int>("IdPlayer")
                        .HasColumnType("int");

                    b.Property<int>("IdPosition")
                        .HasColumnType("int");

                    b.Property<bool>("IsStarter")
                        .HasColumnType("bit");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionMinute")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("IdMatchPlayers");

                    b.HasIndex("IdMatch");

                    b.HasIndex("IdPlayer");

                    b.HasIndex("IdPosition");

                    b.ToTable("MatchPlayers");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Player", b =>
                {
                    b.Property<int>("IdPlayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlayer"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Height")
                        .IsRequired()
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<int>("IdPosition")
                        .HasColumnType("int");

                    b.Property<int>("IdTeam")
                        .HasColumnType("int");

                    b.Property<int>("JerseyNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("MarketValue")
                        .IsRequired()
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Weight")
                        .IsRequired()
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("IdPlayer");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdPosition");

                    b.HasIndex("IdTeam");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Position", b =>
                {
                    b.Property<int>("IdPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPosition"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPosition");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Season", b =>
                {
                    b.Property<int>("IdSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSeason"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLeague")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMatchdays")
                        .HasColumnType("int");

                    b.HasKey("IdSeason");

                    b.HasIndex("IdLeague");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Stadium", b =>
                {
                    b.Property<int>("IdStadium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStadium"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTeam")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdStadium");

                    b.HasIndex("IdTeam")
                        .IsUnique();

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Team", b =>
                {
                    b.Property<int>("IdTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTeam"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCompetition")
                        .HasColumnType("int");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<int>("IdLeague")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdTeam");

                    b.HasIndex("IdCompetition");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdLeague");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Competition", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Country", "Country")
                        .WithMany("Competitions")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Federation", "Federation")
                        .WithMany("Competitions")
                        .HasForeignKey("IdFederation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Season", "Season")
                        .WithMany("Competitions")
                        .HasForeignKey("IdSeason")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Federation");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Federation", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Country", "Country")
                        .WithMany("Federations")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.League", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Country", "Country")
                        .WithMany("Leagues")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.LeagueTable", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Season", "Season")
                        .WithMany("LeagueTables")
                        .HasForeignKey("IdSeason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Match", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("IdAwayTeam")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Competition", "Competition")
                        .WithMany("Matches")
                        .HasForeignKey("IdCompetition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("IdHomeTeam")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("IdStadium")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Season", null)
                        .WithMany("Matches")
                        .HasForeignKey("SeasonIdSeason");

                    b.Navigation("AwayTeam");

                    b.Navigation("Competition");

                    b.Navigation("HomeTeam");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.MatchPlayer", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Match", "Match")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("IdMatch")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Player", "Player")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Position", "Position")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("IdPosition")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Player", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("IdPosition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Season", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.League", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("IdLeague")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Stadium", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Team", "Team")
                        .WithOne("Stadium")
                        .HasForeignKey("DesdeElBanquilloApplication.Models.Stadium", "IdTeam")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Team", b =>
                {
                    b.HasOne("DesdeElBanquilloApplication.Models.Competition", "Competition")
                        .WithMany("Teams")
                        .HasForeignKey("IdCompetition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.Country", "Country")
                        .WithMany("Teams")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DesdeElBanquilloApplication.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("IdLeague")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Country");

                    b.Navigation("League");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Competition", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Country", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Federations");

                    b.Navigation("Leagues");

                    b.Navigation("Players");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Federation", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.League", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Match", b =>
                {
                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Player", b =>
                {
                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Position", b =>
                {
                    b.Navigation("MatchPlayers");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Season", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("LeagueTables");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Stadium", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("DesdeElBanquilloApplication.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");

                    b.Navigation("Stadium");
                });
#pragma warning restore 612, 618
        }
    }
}
